#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
/**
 *
 */
function execute() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const mode = index_1.argumentsToCypressMode(process.argv);
            const options = yield index_1.argumentsToOptions(process.argv);
            if (mode === "open") {
                yield index_1.open(options);
            }
            else {
                const result = yield index_1.run(options);
                if (result.failures) {
                    console.error("Cypress could not execute tests");
                    console.error(result.message);
                    process.exit(result.failures);
                }
                // Required on windows since Cypress hangs after the run call
                process.exit(result.totalFailed);
            }
        }
        catch (err) {
            console.error(err.message);
            console.error(err);
            process.exit(1);
        }
    });
}
execute();
