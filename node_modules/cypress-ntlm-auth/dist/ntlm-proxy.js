"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NtlmProxy = void 0;
class NtlmProxy {
    constructor(ports, ntlmProxyFacade) {
        this.ports = ports;
        this.ntlmProxyFacade = ntlmProxyFacade;
    }
    /**
     * Add NTLM configuration
     *
     * @param {NtlmConfig} config The NtlmConfig to apply, see the README for details
     */
    ntlm(config) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ntlmProxyFacade.ntlm(this.ports.configApiUrl, config);
        });
    }
    /**
     * Add NTLM SSO configuration
     *
     * @param {NtlmSsoConfig} config The NtlmSsoConfig to apply, see the README for details
     */
    ntlmSso(config) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ntlmProxyFacade.ntlmSso(this.ports.configApiUrl, config);
        });
    }
    /**
     * Reset connections and configuration
     */
    reset() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ntlmProxyFacade.reset(this.ports.configApiUrl);
        });
    }
    /**
     * Check if proxy is alive
     *
     * @returns {PortsConfig} The PortsConfig for the proxy
     */
    alive() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.ntlmProxyFacade.alive(this.ports.configApiUrl);
        });
    }
    /**
     * Stops ntlm-proxy
     *
     * @returns {boolean} True if the proxy was stopped, false if there was not response or the proxy does not exist.
     */
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.ntlmProxyFacade.quitIfRunning(this.ports.configApiUrl);
            this.ports.configApiUrl = "";
            this.ports.ntlmProxyUrl = "";
            return result;
        });
    }
}
exports.NtlmProxy = NtlmProxy;
