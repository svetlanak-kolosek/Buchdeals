"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpstreamProxyConfigurator = void 0;
const dependency_injection_types_1 = require("../proxy/dependency.injection.types");
const inversify_1 = require("inversify");
const os_1 = __importDefault(require("os"));
let UpstreamProxyConfigurator = class UpstreamProxyConfigurator {
    constructor(environment, debug) {
        this._loopbackDisable = "<-loopback>";
        this._noProxyLocalhost = "localhost";
        this._noProxyLoopback = "127.0.0.1";
        this._environment = environment;
        this._debug = debug;
    }
    removeUnusedProxyEnv() {
        // Clear potentially existing proxy settings to avoid conflicts in cypress proxy config
        if (os_1.default.platform() !== "win32") {
            this._environment.delete("http_proxy");
            this._environment.delete("https_proxy");
            this._environment.delete("no_proxy");
        }
        this._environment.delete("npm_config_proxy");
        this._environment.delete("npm_config_https_proxy");
        this._environment.delete("NPM_CONFIG_PROXY");
        this._environment.delete("NPM_CONFIG_HTTPS_PROXY");
    }
    processNoProxyLoopback() {
        var _a;
        if (this._environment.httpProxy) {
            const envNoProxy = (_a = this._environment.noProxy) === null || _a === void 0 ? void 0 : _a.trim();
            if (envNoProxy && envNoProxy.indexOf(this._loopbackDisable) !== -1) {
                this._debug.log("NO_PROXY contains '<-loopback>', will not disable localhost proxying");
            }
            else {
                this._environment.noProxy = this.addLoopbackToNoProxy(envNoProxy);
            }
        }
    }
    addLoopbackToNoProxy(noProxy) {
        let noProxyParts = [];
        if (noProxy) {
            noProxyParts = noProxy.split(",").map((s) => s.trim());
        }
        if (noProxyParts.indexOf(this._noProxyLocalhost) === -1) {
            this._debug.log("Adding " +
                this._noProxyLocalhost +
                " to NO_PROXY to disable localhost proxying");
            noProxyParts.push(this._noProxyLocalhost);
        }
        if (noProxyParts.indexOf(this._noProxyLoopback) === -1) {
            this._debug.log("Adding " +
                this._noProxyLoopback +
                " to NO_PROXY to disable loopback proxying");
            noProxyParts.push(this._noProxyLoopback);
        }
        return noProxyParts.join(",");
    }
};
UpstreamProxyConfigurator = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(dependency_injection_types_1.TYPES.IEnvironment)),
    __param(1, inversify_1.inject(dependency_injection_types_1.TYPES.IDebugLogger)),
    __metadata("design:paramtypes", [Object, Object])
], UpstreamProxyConfigurator);
exports.UpstreamProxyConfigurator = UpstreamProxyConfigurator;
