"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Environment = void 0;
const inversify_1 = require("inversify");
const url_1 = __importDefault(require("url"));
let Environment = class Environment {
    constructor() {
        this._loopbackDisable = "<-loopback>";
    }
    get configApiUrl() {
        return process.env.CYPRESS_NTLM_AUTH_API;
    }
    set configApiUrl(configApiUrl) {
        process.env.CYPRESS_NTLM_AUTH_API = configApiUrl;
    }
    get configApiPort() {
        return this.portFromUrl(this.configApiUrl);
    }
    get ntlmProxyUrl() {
        return process.env.CYPRESS_NTLM_AUTH_PROXY;
    }
    set ntlmProxyUrl(ntlmProxyUrl) {
        process.env.CYPRESS_NTLM_AUTH_PROXY = ntlmProxyUrl;
    }
    get ntlmProxyPort() {
        return this.portFromUrl(this.ntlmProxyUrl);
    }
    get httpProxy() {
        return process.env.HTTP_PROXY;
    }
    set httpProxy(httpProxy) {
        process.env.HTTP_PROXY = httpProxy;
    }
    get httpsProxy() {
        return process.env.HTTPS_PROXY;
    }
    set httpsProxy(httpsProxy) {
        process.env.HTTPS_PROXY = httpsProxy;
    }
    get noProxy() {
        return process.env.NO_PROXY;
    }
    set noProxy(noProxy) {
        process.env.NO_PROXY = noProxy;
    }
    configureForCypress(ports) {
        this.configApiUrl = ports.configApiUrl;
        this.ntlmProxyUrl = ports.ntlmProxyUrl;
        this.httpProxy = ports.ntlmProxyUrl;
        this.httpsProxy = ports.ntlmProxyUrl;
        this.noProxy = this._loopbackDisable;
    }
    delete(key) {
        delete process.env[key];
    }
    portFromUrl(value) {
        if (!value) {
            return undefined;
        }
        const parsed = url_1.default.parse(value);
        if (!parsed.port) {
            return undefined;
        }
        return +parsed.port;
    }
};
Environment = __decorate([
    inversify_1.injectable()
], Environment);
exports.Environment = Environment;
