"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NtlmProxyFacade = void 0;
const dependency_injection_types_1 = require("../proxy/dependency.injection.types");
const inversify_1 = require("inversify");
const http_1 = __importDefault(require("http"));
const url_1 = __importDefault(require("url"));
let NtlmProxyFacade = class NtlmProxyFacade {
    constructor(debug) {
        this._debug = debug;
    }
    request(configApiUrl, path, method, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this._debug.log("Sending " + path + " request to NTLM proxy " + configApiUrl);
                const configApiUrlParsed = url_1.default.parse(configApiUrl);
                const options = {
                    hostname: configApiUrlParsed.hostname,
                    port: configApiUrlParsed.port,
                    path: "/" + path,
                    method: method,
                    timeout: 3000,
                };
                const req = http_1.default.request(options, (res) => {
                    let resBody = "";
                    res.on("data", (chunk) => (resBody += chunk));
                    res.on("end", () => {
                        if (res.statusCode !== 200) {
                            this._debug.log("Unexpected response from NTLM proxy: " + res.statusCode);
                            this._debug.log("Response body: " + resBody);
                            this._debug.log(path + " request failed");
                            return reject(new Error("Unexpected response from NTLM proxy: " + res.statusCode));
                        }
                        this._debug.log(path + " request succeeded");
                        if (!resBody || resBody === "OK") {
                            return resolve(undefined);
                        }
                        else {
                            this._debug.log(path + " response body " + resBody);
                            return resolve(JSON.parse(resBody));
                        }
                    });
                });
                req.on("error", (error) => {
                    this._debug.log(path + " request failed");
                    return reject(new Error("An error occurred while communicating with NTLM proxy: " +
                        error.message));
                });
                if (body) {
                    const bodyStr = JSON.stringify(body);
                    req.setHeader("Content-Type", "application/json");
                    req.setHeader("Content-Length", bodyStr.length);
                    req.write(bodyStr);
                }
                req.end();
            });
        });
    }
    alive(configApiUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.request(configApiUrl, "alive", "GET", undefined));
        });
    }
    reset(configApiUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.request(configApiUrl, "reset", "POST", undefined);
        });
    }
    ntlm(configApiUrl, ntlmConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.request(configApiUrl, "ntlm-config", "POST", ntlmConfig);
        });
    }
    ntlmSso(configApiUrl, ntlmSsoConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.request(configApiUrl, "ntlm-sso", "POST", ntlmSsoConfig);
        });
    }
    quitIfRunning(configApiUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            if (configApiUrl) {
                (yield this.request(configApiUrl, "quit", "POST", undefined));
                return true;
            }
            else {
                this._debug.log("CYPRESS_NTLM_AUTH_API is not set, nothing to do.");
                return false;
            }
        });
    }
};
NtlmProxyFacade = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(dependency_injection_types_1.TYPES.IDebugLogger)),
    __metadata("design:paramtypes", [Object])
], NtlmProxyFacade);
exports.NtlmProxyFacade = NtlmProxyFacade;
