"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stopNtlmProxy = exports.startNtlmProxy = exports.argumentsToOptions = exports.argumentsToCypressMode = exports.open = exports.run = void 0;
const dependency_injection_1 = require("./proxy/dependency.injection");
const dependency_injection_types_1 = require("./proxy/dependency.injection.types");
const ntlm_proxy_1 = require("./ntlm-proxy");
const container = new dependency_injection_1.DependencyInjection();
const startup = container.get(dependency_injection_types_1.TYPES.IStartup);
const environment = container.get(dependency_injection_types_1.TYPES.IEnvironment);
const ntlmProxyFacade = container.get(dependency_injection_types_1.TYPES.INtlmProxyFacade);
/**
 * Starts Cypress in headless mode with NTLM plugin
 *
 * @param {any} options An options object as defined by https://docs.cypress.io/guides/guides/module-api.html#Options
 * @returns {any} Test results as defined by https://docs.cypress.io/guides/guides/module-api.html#Results
 */
function run(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield startup.run(options);
    });
}
exports.run = run;
/**
 * Starts Cypress in headed mode with NTLM plugin
 *
 * @param {any} options An options object as defined by https://docs.cypress.io/guides/guides/module-api.html#Options-1
 * @returns {any} Test results
 */
function open(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield startup.open(options);
    });
}
exports.open = open;
/**
 * Converts command line arguments to Cypress mode ('run' or 'open')
 *
 * @param {string[]} args command line arguments
 * @returns {string} 'run' or 'open'
 */
function argumentsToCypressMode(args) {
    return startup.argumentsToCypressMode(args);
}
exports.argumentsToCypressMode = argumentsToCypressMode;
/**
 * Converts command line arguments to a Cypress options object.
 *
 * @param {string[]} args command line arguments
 * @returns {any} An options object for the run() or open() methods
 */
function argumentsToOptions(args) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield startup.prepareOptions(args);
    });
}
exports.argumentsToOptions = argumentsToOptions;
/**
 * Starts a new ntlm-proxy
 *
 * @returns {NtlmProxy} The created NtlmProxy
 */
function startNtlmProxy() {
    return __awaiter(this, void 0, void 0, function* () {
        // Create a new root instance for each ntlm-proxy
        const startup = container.get(dependency_injection_types_1.TYPES.IStartup);
        const ports = yield startup.startNtlmProxy();
        return new ntlm_proxy_1.NtlmProxy(ports, ntlmProxyFacade);
    });
}
exports.startNtlmProxy = startNtlmProxy;
/**
 * Stop a running ntlm-proxy, uses environment variable to find the config API url
 *
 * @returns {boolean} True if the proxy was stopped, false if there was not response or the proxy does not exist.
 */
function stopNtlmProxy() {
    return __awaiter(this, void 0, void 0, function* () {
        if (!environment.configApiUrl) {
            console.info("CYPRESS_NTLM_AUTH_API environment variable not set");
            return false;
        }
        return yield ntlmProxyFacade.quitIfRunning(environment.configApiUrl);
    });
}
exports.stopNtlmProxy = stopNtlmProxy;
