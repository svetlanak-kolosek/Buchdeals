"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionContext = void 0;
const inversify_1 = require("inversify");
let ConnectionContext = class ConnectionContext {
    constructor() {
        this._ntlmState = 0 /* NotAuthenticated */;
        this._requestBody = Buffer.alloc(0);
        this._clientAddress = "";
        this._configApiConnection = false;
    }
    get agent() {
        return this._agent;
    }
    set agent(agent) {
        this._agent = agent;
    }
    get winSso() {
        if (!this._winSso) {
            throw new Error("WinSso not initialized for context");
        }
        return this._winSso;
    }
    set winSso(winSso) {
        this._winSso = winSso;
    }
    get peerCert() {
        return this._peerCert;
    }
    set peerCert(peerCert) {
        this._peerCert = peerCert;
    }
    get clientAddress() {
        return this._clientAddress;
    }
    set clientAddress(clientAddress) {
        this._clientAddress = clientAddress;
    }
    get clientSocket() {
        return this._clientSocket;
    }
    set clientSocket(clientSocket) {
        this._clientSocket = clientSocket;
    }
    get socketCloseListener() {
        return this._socketCloseListener;
    }
    set socketCloseListener(listener) {
        this._socketCloseListener = listener;
    }
    get configApiConnection() {
        return this._configApiConnection;
    }
    set configApiConnection(val) {
        this._configApiConnection = val;
    }
    /**
     * If the connection is new or a handshake has been completed (successful or failed),
     * a new handshake can be intiated
     * @param ntlmHostUrl The target url
     */
    canStartAuthHandshake(ntlmHostUrl) {
        const auth = this._ntlmHost === undefined ||
            (this._ntlmHost.href === ntlmHostUrl.href &&
                (this._ntlmState === 4 /* Authenticated */ ||
                    this._ntlmState === 0 /* NotAuthenticated */));
        return auth;
    }
    matchHostOrNew(ntlmHostUrl) {
        return (this._ntlmHost === undefined || this._ntlmHost.href === ntlmHostUrl.href);
    }
    getState(ntlmHostUrl) {
        if (this._ntlmHost && ntlmHostUrl.href === this._ntlmHost.href) {
            return this._ntlmState;
        }
        return 0 /* NotAuthenticated */;
    }
    setState(ntlmHostUrl, authState) {
        this._ntlmHost = ntlmHostUrl;
        this._ntlmState = authState;
    }
    clearRequestBody() {
        this._requestBody = Buffer.alloc(0);
    }
    addToRequestBody(chunk) {
        this._requestBody = Buffer.concat([this._requestBody, chunk]);
    }
    getRequestBody() {
        return this._requestBody;
    }
    destroy(event) {
        if (this._agent.destroy) {
            this._agent.destroy(); // Destroys any sockets to servers
        }
        if (this._clientSocket && event !== "reuse") {
            this._clientSocket.destroy();
        }
        if (this._winSso) {
            this._winSso.freeAuthContext();
        }
    }
};
ConnectionContext = __decorate([
    inversify_1.injectable()
], ConnectionContext);
exports.ConnectionContext = ConnectionContext;
