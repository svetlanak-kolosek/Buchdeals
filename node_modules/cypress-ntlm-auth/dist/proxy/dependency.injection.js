"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DependencyInjection = void 0;
const inversify_1 = require("inversify");
const dependency_injection_types_1 = require("./dependency.injection.types");
require("reflect-metadata");
const config_controller_1 = require("./config.controller");
const connection_context_1 = require("./connection.context");
const connection_context_manager_1 = require("./connection.context.manager");
const config_store_1 = require("./config.store");
const config_server_1 = require("./config.server");
const core_server_1 = require("./core.server");
const startup_1 = require("../startup/startup");
const upstream_proxy_manager_1 = require("./upstream.proxy.manager");
const upstream_proxy_configurator_1 = require("../startup/upstream.proxy.configurator");
const win_sso_facade_1 = require("./win-sso.facade");
const negotiate_manager_1 = require("./negotiate.manager");
const ntlm_1 = require("../ntlm/ntlm");
const ntlm_manager_1 = require("./ntlm.manager");
const ntlm_proxy_mitm_1 = require("./ntlm.proxy.mitm");
const ntlm_proxy_server_1 = require("./ntlm.proxy.server");
const express_server_facade_1 = require("./express.server.facade");
const http_mitm_proxy_facade_1 = require("./http.mitm.proxy.facade");
const debug_logger_1 = require("../util/debug.logger");
const ntlm_proxy_facade_1 = require("../startup/ntlm.proxy.facade");
const main_1 = require("./main");
const cypress_facade_1 = require("../startup/cypress.facade");
const ports_config_store_1 = require("./ports.config.store");
const environment_1 = require("../startup/environment");
class DependencyInjection {
    constructor() {
        this._container = new inversify_1.Container({ defaultScope: "Request" });
        this._container
            .bind(dependency_injection_types_1.TYPES.IPortsConfigStore)
            .to(ports_config_store_1.PortsConfigStore);
        this._container
            .bind(dependency_injection_types_1.TYPES.IConfigController)
            .to(config_controller_1.ConfigController);
        this._container.bind(dependency_injection_types_1.TYPES.IConfigServer).to(config_server_1.ConfigServer);
        this._container.bind(dependency_injection_types_1.TYPES.IConfigStore).to(config_store_1.ConfigStore);
        this._container
            .bind(dependency_injection_types_1.TYPES.IConnectionContextManager)
            .to(connection_context_manager_1.ConnectionContextManager);
        this._container.bind(dependency_injection_types_1.TYPES.ICoreServer).to(core_server_1.CoreServer);
        this._container
            .bind(dependency_injection_types_1.TYPES.ICypressFacade)
            .to(cypress_facade_1.CypressFacade);
        this._container.bind(dependency_injection_types_1.TYPES.IStartup).to(startup_1.Startup);
        this._container
            .bind(dependency_injection_types_1.TYPES.IDebugLogger)
            .to(debug_logger_1.DebugLogger)
            .inSingletonScope();
        this._container.bind(dependency_injection_types_1.TYPES.IEnvironment).to(environment_1.Environment);
        this._container
            .bind(dependency_injection_types_1.TYPES.IExpressServerFacade)
            .to(express_server_facade_1.ExpressServerFacade);
        this._container
            .bind(dependency_injection_types_1.TYPES.IHttpMitmProxyFacade)
            .to(http_mitm_proxy_facade_1.HttpMitmProxyFacade);
        this._container.bind(dependency_injection_types_1.TYPES.IMain).to(main_1.Main);
        this._container
            .bind(dependency_injection_types_1.TYPES.INegotiateManager)
            .to(negotiate_manager_1.NegotiateManager);
        this._container.bind(dependency_injection_types_1.TYPES.INtlm).to(ntlm_1.Ntlm);
        this._container.bind(dependency_injection_types_1.TYPES.INtlmManager).to(ntlm_manager_1.NtlmManager);
        this._container
            .bind(dependency_injection_types_1.TYPES.INtlmProxyFacade)
            .to(ntlm_proxy_facade_1.NtlmProxyFacade);
        this._container
            .bind(dependency_injection_types_1.TYPES.INtlmProxyMitm)
            .to(ntlm_proxy_mitm_1.NtlmProxyMitm);
        this._container
            .bind(dependency_injection_types_1.TYPES.INtlmProxyServer)
            .to(ntlm_proxy_server_1.NtlmProxyServer);
        this._container
            .bind(dependency_injection_types_1.TYPES.IUpstreamProxyConfigurator)
            .to(upstream_proxy_configurator_1.UpstreamProxyConfigurator);
        this._container
            .bind(dependency_injection_types_1.TYPES.IUpstreamProxyManager)
            .to(upstream_proxy_manager_1.UpstreamProxyManager);
        this._container
            .bind(dependency_injection_types_1.TYPES.NewableIConnectionContext)
            .toConstructor(connection_context_1.ConnectionContext);
        this._container
            .bind(dependency_injection_types_1.TYPES.NewableIWinSsoFacade)
            .toConstructor(win_sso_facade_1.WinSsoFacade);
    }
    get(typename) {
        return this._container.get(typename);
    }
}
exports.DependencyInjection = DependencyInjection;
