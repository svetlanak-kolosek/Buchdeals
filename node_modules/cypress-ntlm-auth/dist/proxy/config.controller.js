"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigController = void 0;
const express_1 = require("express");
const config_validator_1 = require("../util/config.validator");
const inversify_1 = require("inversify");
const events_1 = require("events");
const dependency_injection_types_1 = require("./dependency.injection.types");
const sso_config_validator_1 = require("../util/sso.config.validator");
const win_sso_1 = require("win-sso");
let ConfigController = class ConfigController {
    constructor(configStore, portsConfigStore, debug) {
        // eslint-disable-next-line new-cap
        this.router = express_1.Router();
        this.configApiEvent = new events_1.EventEmitter();
        this._configStore = configStore;
        this._portsConfigStore = portsConfigStore;
        this._debug = debug;
        this.router.post("/ntlm-config", (req, res) => this.ntlmConfig(req, res));
        this.router.post("/ntlm-sso", (req, res) => this.ntlmSso(req, res));
        this.router.post("/reset", (req, res) => this.reset(req, res));
        this.router.get("/alive", (req, res) => this.alive(req, res));
        this.router.post("/quit", (req, res) => this.quit(req, res));
    }
    ntlmConfig(req, res) {
        const validateResult = config_validator_1.ConfigValidator.validate(req.body);
        if (!validateResult.ok) {
            res.status(400).send("Config parse error. " + validateResult.message);
        }
        else {
            this._debug.log("Received valid NTLM config update");
            const config = req.body;
            this._debug.log("Added new hosts", config.ntlmHosts);
            this._configStore.updateConfig(config);
            res.sendStatus(200);
        }
    }
    ntlmSso(req, res) {
        const validateResult = sso_config_validator_1.SsoConfigValidator.validate(req.body);
        if (!validateResult.ok) {
            res.status(400).send("SSO config parse error. " + validateResult.message);
            return;
        }
        if (!win_sso_1.osSupported()) {
            res
                .status(400)
                .send("SSO is not supported on this platform. Only Windows OSs are supported.");
            return;
        }
        this._debug.log("Received valid NTLM SSO config");
        const config = req.body;
        this._configStore.setSsoConfig(config);
        res.sendStatus(200);
    }
    reset(req, res) {
        this._debug.log("Received reset");
        this.configApiEvent.emit("reset");
        res.sendStatus(200);
    }
    alive(req, res) {
        this._debug.log("Received alive");
        if (this._portsConfigStore.ntlmProxyUrl) {
            const ports = {
                configApiUrl: this._portsConfigStore.configApiUrl,
                ntlmProxyUrl: this._portsConfigStore.ntlmProxyUrl,
            };
            res.status(200).send(ports);
        }
        else {
            res.sendStatus(503);
        }
    }
    quit(req, res) {
        this._debug.log("Received quit");
        res.sendStatus(200);
        this.configApiEvent.emit("quit");
    }
};
ConfigController = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(dependency_injection_types_1.TYPES.IConfigStore)),
    __param(1, inversify_1.inject(dependency_injection_types_1.TYPES.IPortsConfigStore)),
    __param(2, inversify_1.inject(dependency_injection_types_1.TYPES.IDebugLogger)),
    __metadata("design:paramtypes", [Object, Object, Object])
], ConfigController);
exports.ConfigController = ConfigController;
