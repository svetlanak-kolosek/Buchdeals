"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionContextManager = void 0;
const inversify_1 = require("inversify");
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const dependency_injection_types_1 = require("./dependency.injection.types");
const HttpProxyAgent = require("http-proxy-agent");
const HttpsProxyAgent = require("https-proxy-agent");
let ConnectionContextManager = class ConnectionContextManager {
    constructor(upstreamProxyManager, configController, connectionContext, debug) {
        this._agentCount = 0;
        this._connectionContexts = {};
        this._tunnels = {};
        this._upstreamProxyManager = upstreamProxyManager;
        this._configController = configController;
        this.ConnectionContext = connectionContext;
        this._debug = debug;
    }
    getClientAddress(clientSocket) {
        return clientSocket.remoteAddress + ":" + clientSocket.remotePort;
    }
    createConnectionContext(clientSocket, isSSL, targetHost) {
        const clientAddress = this.getClientAddress(clientSocket);
        if (clientAddress in this._connectionContexts) {
            return this._connectionContexts[clientAddress];
        }
        const agent = this.getAgent(isSSL, targetHost);
        agent._cyAgentId = this._agentCount++;
        const context = new this.ConnectionContext();
        context.clientAddress = clientAddress;
        context.agent = agent;
        context.clientSocket = clientSocket;
        this._connectionContexts[clientAddress] = context;
        context.socketCloseListener = this.removeAgentOnClose.bind(this, clientAddress);
        clientSocket.once("close", context.socketCloseListener);
        this._debug.log("Created agent for client " +
            clientAddress +
            " to target " +
            targetHost.href);
        return context;
    }
    removeAgentOnClose(clientAddress) {
        this.removeAgent("close", clientAddress);
    }
    getConnectionContextFromClientSocket(clientSocket) {
        const clientAddress = this.getClientAddress(clientSocket);
        if (clientAddress in this._connectionContexts) {
            return this._connectionContexts[clientAddress];
        }
        return undefined;
    }
    nodeTlsRejectUnauthorized() {
        if (process.env.NODE_TLS_REJECT_UNAUTHORIZED) {
            return process.env.NODE_TLS_REJECT_UNAUTHORIZED !== "0";
        }
        return true;
    }
    getAgent(isSSL, targetHost) {
        const agentOptions = {
            keepAlive: true,
            maxSockets: 1,
            rejectUnauthorized: 
            // Allow self-signed certificates if target is on localhost
            this.nodeTlsRejectUnauthorized() && !targetHost.isLocalhost,
        };
        const useUpstreamProxy = this._upstreamProxyManager.setUpstreamProxyConfig(targetHost, isSSL, agentOptions);
        let agent;
        if (useUpstreamProxy) {
            agent = isSSL
                ? new HttpsProxyAgent(agentOptions)
                : new HttpProxyAgent(agentOptions);
        }
        else {
            agent = isSSL
                ? new https_1.default.Agent(agentOptions)
                : new http_1.default.Agent(agentOptions);
        }
        return agent;
    }
    // Untracked agents are used for requests to the config API.
    // These should not be destroyed on reset since that breaks the config API response.
    getUntrackedAgent(targetHost) {
        let agent;
        // eslint-disable-next-line prefer-const
        agent = new http_1.default.Agent();
        agent._cyAgentId = this._agentCount++;
        this._debug.log("Created untracked agent for target " + targetHost.href);
        return agent;
    }
    removeAllConnectionContexts(event) {
        var _a;
        const preservedContexts = {};
        for (const property in this._connectionContexts) {
            if (this._connectionContexts.hasOwnProperty(property)) {
                const context = this._connectionContexts[property];
                if (context.configApiConnection) {
                    // Must let config api context stay alive, otherwise there is no response to a reset or quit call
                    preservedContexts[context.clientAddress] = context;
                }
                else {
                    (_a = context.clientSocket) === null || _a === void 0 ? void 0 : _a.removeListener("close", context.socketCloseListener);
                    this._debug.log("Destroying context for", context.clientAddress);
                    context.destroy(event);
                }
            }
        }
        this._connectionContexts = preservedContexts;
        this._debug.log("Removed all agents due to " + event);
    }
    removeAgent(event, clientAddress) {
        var _a;
        if (clientAddress in this._connectionContexts) {
            (_a = this._connectionContexts[clientAddress].clientSocket) === null || _a === void 0 ? void 0 : _a.removeListener("close", this._connectionContexts[clientAddress].socketCloseListener);
            this._connectionContexts[clientAddress].destroy(event);
            delete this._connectionContexts[clientAddress];
            this._debug.log("Removed agent for " + clientAddress + " due to socket." + event);
        }
    }
    addTunnel(client, target) {
        this._tunnels[this.getClientAddress(client)] = {
            client: client,
            target: target,
        };
    }
    removeTunnel(client) {
        const clientAddress = this.getClientAddress(client);
        if (clientAddress in this._tunnels) {
            delete this._tunnels[clientAddress];
        }
    }
    removeAndCloseAllTunnels(event) {
        for (const property in this._tunnels) {
            if (this._tunnels.hasOwnProperty(property)) {
                if (this._tunnels[property].target) {
                    this._tunnels[property].target.end();
                }
            }
        }
        this._tunnels = {};
        this._debug.log("Removed and closed all tunnels due to " + event);
    }
};
ConnectionContextManager = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(dependency_injection_types_1.TYPES.IUpstreamProxyManager)),
    __param(1, inversify_1.inject(dependency_injection_types_1.TYPES.IConfigController)),
    __param(2, inversify_1.inject(dependency_injection_types_1.TYPES.NewableIConnectionContext)),
    __param(3, inversify_1.inject(dependency_injection_types_1.TYPES.IDebugLogger)),
    __metadata("design:paramtypes", [Object, Object, Object, Object])
], ConnectionContextManager);
exports.ConnectionContextManager = ConnectionContextManager;
